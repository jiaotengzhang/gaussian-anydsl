struct image {
  buffer : Buffer,
  device_data : Buffer,
  width : i32,
  height : i32
};

struct filter {
  buffer : Buffer,
  size : i32
};

fn range(mut min : i32, max : i32, body : fn(i32) -> ()) -> () {
  while min < max {
    body(min);
    min++;
  }
}

fn exp(a : f64) -> f64 {
  cpu_intrinsics.exp(a)
}

/* Sets image pixel at (x, y) coordinates */
fn set_pixel(img : image, x : i32, y : i32, value : f64) -> () {
  let converted_data = img.buffer.data as &mut[f64];
  converted_data(y * img.width + x) = value;
}

/* Gets image pixel at (x, y) coordinates */
fn get_pixel(img : image, x : i32, y : i32) -> f64 {
  let converted_data = img.buffer.data as &[f64];
  converted_data(y * img.width + x)
}

/* Gets 1D filter coefficient at i index */
fn get_1d_filter_coeff(filt : filter, i : i32) -> f64 {
  let converted_data = filt.buffer.data as &[f64];
  converted_data(i)
}

/* Gets 2D filter coefficient at (i, j) index */
fn get_2d_filter_coeff(filt : filter, i : i32, j : i32) -> f64 {
  let converted_data = filt.buffer.data as &[f64];
  converted_data(j * filt.size + i) 
}

fn get_image_device_data(img : image) -> Buffer {
  Buffer {
    device: 0,
    data: 0 as &[i8]
  }
}

fn release_image(img : image) -> () {

}

fn release_filter(filt : filter) -> () {

}

fn iterate(input_image : image, output_image : image, body : fn(i32, i32) -> ()) -> () {
  for y in range(0, input_image.height) {
    for x in range(0, input_image.width) {
      body(x, y);
    }
  }
}

/* Generates a 5x1 filter data structure given its coefficients */
fn filter_5x1(mask : Buffer) -> filter {
  /* Allocates the filter data structure for a 5x1 filter */
  filter {
    buffer: mask,
    size: 5
  }
}

/* Generates a 5x5 filter data structure given its coefficients */
fn filter_5x5(mask : Buffer) -> filter {
  /* Allocates the filter data structure for a 5x5 filter */
  filter {
    buffer: mask,
    size: 5
  }
}

/* Generates a 7x1 filter data structure given its coefficients */
fn filter_7x1(mask : Buffer) -> filter {
  /* Allocates the filter data structure for a 7x1 filter */
  filter {
    buffer: mask,
    size: 7
  }
}

/* Generates a 7x7 filter data structure given its coefficients */
fn filter_7x7(mask : Buffer) -> filter {
  /* Allocates the filter data structure for a 7x7 filter */
  filter {
    buffer: mask,
    size: 7
  }
}
